import os
import json
import logging
import tempfile
from pathlib import Path

def prepare_google_creds_for_tts():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google-–∫–ª—é—á–∞–º–∏ –¥–ª—è google_tts.py."""
    logging.info("üß™ –§—É–Ω–∫—Ü–∏—è prepare_google_creds_for_tts –≤—ã–∑–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GOOGLE_APPLICATION_CREDENTIALS
    direct_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    if direct_path and Path(direct_path).exists():
        logging.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GOOGLE_APPLICATION_CREDENTIALS: {direct_path}")
        return direct_path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GOOGLE_CREDS_JSON
    raw_creds = os.getenv("GOOGLE_CREDS_JSON")
    if not raw_creds:
        logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã GOOGLE_APPLICATION_CREDENTIALS –∏–ª–∏ GOOGLE_CREDS_JSON")
        raise RuntimeError("GOOGLE_APPLICATION_CREDENTIALS –∏–ª–∏ GOOGLE_CREDS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    try:
        creds_dict = json.loads(raw_creds)
        with tempfile.NamedTemporaryFile(mode="w+", delete=False, suffix=".json") as temp_key_file:
            json.dump(creds_dict, temp_key_file)
            temp_key_file.flush()
            temp_path = temp_key_file.name
            logging.info(f"üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á: {temp_path}")
            return temp_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ Google-–∫—Ä–µ–¥–æ–≤: {e}")
        raise