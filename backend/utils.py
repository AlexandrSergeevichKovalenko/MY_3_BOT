import os
import json
import logging
import tempfile
from pathlib import Path

'''
–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º, 
–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å (TTS), —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–≥–æ –¥–æ—Å—Ç—É–ø –∫ Google Text-to-Speech API.
'''

def prepare_google_creds_for_tts():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google-–∫–ª—é—á–∞–º–∏ –¥–ª—è google_tts.py."""
    logging.info("üß™ –§—É–Ω–∫—Ü–∏—è prepare_google_creds_for_tts –≤—ã–∑–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GOOGLE_APPLICATION_CREDENTIALS
    direct_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    if direct_path and Path(direct_path).exists():
        logging.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GOOGLE_APPLICATION_CREDENTIALS: {direct_path}")
        return direct_path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GOOGLE_CREDS_JSON
    raw_creds = os.getenv("GOOGLE_CREDS_JSON")
    if not raw_creds:
        logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã GOOGLE_APPLICATION_CREDENTIALS –∏–ª–∏ GOOGLE_CREDS_JSON")
        raise RuntimeError("GOOGLE_APPLICATION_CREDENTIALS –∏–ª–∏ GOOGLE_CREDS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    try:
        #–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏) JSON-—Å—Ç—Ä–æ–∫—É raw_creds –≤ Python-—Å–ª–æ–≤–∞—Ä—å.
        creds_dict = json.loads(raw_creds)
        with tempfile.NamedTemporaryFile(mode="w+", delete=False, suffix=".json") as temp_key_file:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç Python-—Å–ª–æ–≤–∞—Ä—å creds_dict –≤ JSON-—Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ temp_key_file.
            json.dump(creds_dict, temp_key_file)
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ –Ω–∞ –¥–∏—Å–∫.–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON-–∫–ª—é—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª, 
            # –ø—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª. –ë–µ–∑ flush() –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –±—É—Ñ–µ—Ä–µ Python –∏ –Ω–µ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
            temp_key_file.flush()
            #–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
            temp_path = temp_key_file.name
            logging.info(f"üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á: {temp_path}")
            return temp_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ Google-–∫—Ä–µ–¥–æ–≤: {e}")
        raise