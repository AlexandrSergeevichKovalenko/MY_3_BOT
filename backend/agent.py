import asyncio
import os
import logging
from logging.handlers import RotatingFileHandler
from livekit import rtc
from livekit.agents import Agent, AgentSession, JobContext, WorkerOptions, cli, llm, RoomInputOptions
from livekit.plugins import openai, silero
from api import SalesAssistantTools

from dotenv import load_dotenv
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("sales_assistant.log", maxBytes=10*1024*1024, backupCount=5),
        logging.StreamHandler()
    ]
)

class NoBinaryFilter(logging.Filter):
    def filter(self, record):
        return not isinstance(record.msg, bytes)

logging.getLogger().addFilter(NoBinaryFilter())

SALES_ASSISTANT_SYSTEM_INSTRUCTIONS = """
You are a friendly and professional sales assistant representing the company.
Your goal is to communicate effectively with clients, provide product information,
offer new products, understand needs, and assist with order placement.

**Key Actions and Priorities:**
1. **Client Identification**: Always start the conversation with a greeting and attempt to identify the client.
   Ask for their name, surname, and phone number. Use the `get_client_info` tool
   to search by phone number or system ID.
2. **Request Information for Registration/Update**: If the client is new or their data is incomplete,
   politely ask for their first name and phone number before calling `create_or_update_client`.
   **DO NOT call `create_or_update_client` until you have both first_name and phone_number.**
   Optionally, collect last_name, email, city, system_id, and manager_contact if provided.
3. **Discuss New Products**: If the client shows interest in new products or if the
   conversation allows, offer to discuss new products using `get_new_products_info`.
4. **Product Details**: Answer questions about specific products using `get_product_details`.
5. **Order Placement**: If the client expresses a desire to place an order,
   create it using `record_customer_order`. Always clarify product names and quantities.
   Ensure you have a `client_id` (from `get_client_info` or `create_or_update_client`)
   before calling `record_customer_order`.
6. **Manager Contacts**: If the client asks about their manager or who is responsible for their region,
   use `get_manager_for_location` to provide contact information.
7. **Maintain Dialogue**: Always maintain a positive tone, be polite, and clear.
8. **Language**: Communicate exclusively in ENGLISH.
"""

class SalesAssistantAgent(Agent):
    def __init__(self):
        super().__init__(instructions=SALES_ASSISTANT_SYSTEM_INSTRUCTIONS)
        tools_instance = SalesAssistantTools()
        self._tools = [
            tools_instance.get_client_info,
            tools_instance.create_or_update_client,
            tools_instance.get_new_products_info,
            tools_instance.get_product_details,
            tools_instance.record_customer_order,
            tools_instance.get_manager_for_location,
        ]
        self._current_client_id = None
        logging.debug(f"Loaded tools: {[tool.__name__ for tool in self._tools]}")

    async def on_user_joined(self, participant: rtc.RemoteParticipant):
        logging.info(f"üö™ User {participant.identity} joined.")
        self._current_client_id = None
        try:
            # –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            greeting = "Hello! I'm your sales assistant. Please provide your name and phone number to start."
            logging.debug(f"Publishing greeting: '{greeting}'")
            await self.say(greeting)
        except Exception as e:
            logging.error(f"‚ùå Error in on_user_joined: {e}", exc_info=True)
            await self.say("Sorry, an error occurred during startup. Please try again.")

    async def on_user_speech_committed(self, text: str, participant: rtc.RemoteParticipant):
        logging.info(f"üó£Ô∏è Client {participant.identity} said: '{text}'")
        logging.debug(f"Audio buffer size: {len(participant.audio.get_data())} bytes")
        try:
            response_content = await self.generate_reply(text)
            if response_content:
                logging.debug(f"Publishing response to LiveKit: '{response_content}'")
                await self.say(response_content)
            else:
                logging.info("LLM did not generate a text response, possibly a tool was called.")
        except Exception as e:
            logging.error(f"‚ùå Error generating LLM response for user speech: {e}", exc_info=True)
            await self.say("Sorry, an error occurred while processing your request. Please try again.")
    
    # —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ generate_reply –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, 
    # it means that LLM –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –≤–µ—Ä–Ω—É–ª–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
    # –º–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É JSON. –ù–æ –∫–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ LIVEKIT –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –∑–∞ –≤–∞—Å. 
    # –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ –µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á ‚Äî –∏–∑–±–∞–≤–∏—Ç—å –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è Python –≤–∏–¥–µ.
    # # –ü—Å–µ–≤–¥–æ–∫–æ–¥ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ "–ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º"
    # json_string_from_llm = '{"identifier": "0501234567"}'
    # arguments_dict = json.loads(json_string_from_llm)
    # arguments_dict —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º Python-—Å–ª–æ–≤–∞—Ä–µ–º: {'identifier': '0501234567'}
    async def on_function_call(self, name: str, arguments: dict):
        logging.info(f"ü§ñ LLM requested function call: {name} with arguments: {arguments}")
        try:
            tool_func = next((tool for tool in self._tools if tool.__name__ == name), None)
            if tool_func:
                if name == "create_or_update_client" and not arguments.get("phone_number"):
                    logging.error("‚ùå Attempted to call create_or_update_client with empty phone_number")
                    await self.say("Please provide your phone number to proceed with registration.")
                    return
                # **arguments: –≠—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è. –û–Ω –±–µ—Ä–µ—Ç —Å–ª–æ–≤–∞—Ä—å arguments (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'identifier': '0501234567'}) 
                # –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏. –¢–æ –µ—Å—Ç—å, —Å—Ç—Ä–æ–∫–∞ –≤—ã—à–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞: func_result = await tool_func(identifier='0501234567')
                # –≤ –∫–æ–¥–µ on_function_call –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã —è–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ func_result –≤ LLM. 
                # –ò —ç—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ —ç—Ç—É —Ä–∞–±–æ—Ç—É —Ç–æ–∂–µ –±–µ—Ä–µ—Ç –Ω–∞ —Å–µ–±—è –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ AgentSession.
                func_result = await tool_func(**arguments)
                logging.info(f"‚úÖ Result of function '{name}': {func_result}")
                if (name == "get_client_info" or name == "create_or_update_client") and func_result and "id" in func_result:
                    self._current_client_id = func_result["id"]
                    logging.info(f"üÜî Set current_client_id: {self._current_client_id}")
            else:
                logging.error(f"‚ùå Tool function '{name}' not found.")
                await self.say(f"Sorry, the function '{name}' was not found.")
        except Exception as e:
            logging.error(f"‚ùå Error executing function '{name}': {e}", exc_info=True)
            await self.say(f"Sorry, an error occurred while executing '{name}': {e}.")
        # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ on_function_call —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥. 
        # –û–Ω –±–µ—Ä–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç func_result, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "—Ä–æ–ª—å—é" function –∏ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ + —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ LLM.
        # –¢–µ–ø–µ—Ä—å —É LLM –µ—Å—Ç—å –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
        # –ò—Å—Ç–æ—Ä–∏—è: "–ü—Ä–∏–≤–µ—Ç" -> "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∑–æ–≤–∏—Ç–µ—Å—å" -> "–Ø –ò–≤–∞–Ω"
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {'id': 1, 'first_name': '–ò–≤–∞–Ω', 'is_existing_client': True}
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: 
        # "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ò–≤–∞–Ω! –†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ —Å–ª—ã—à–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?". 
        # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ–∑–≤—É—á–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞, —á–µ—Ä–µ–∑ generate_reply –∏ say

    # –≠—Ç–æ "—Ö—É–∫" (hook), –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ on_function_call –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. 
    # –û–Ω –¥–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –Ω–µ —Ç–æ–ª—å–∫–æ –∫ –∏–º–µ–Ω–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º, –Ω–æ –∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (result) –∏–ª–∏ –æ—à–∏–±–∫–µ (error), –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞.
    async def on_function_call_ended(self, name: str, success: bool, result: dict | str | None):
        logging.info(f"üèÅ Function call '{name}' completed. Success: {success}. Result: {result}")

    async def say(self, text: str):
        logging.debug(f"Attempting to publish audio for text: '{text}'")
        try:
            await super().say(text)
            logging.debug("Audio published successfully")
        except Exception as e:
            logging.error(f"‚ùå Failed to publish audio: {e}", exc_info=True)

async def entrypoint(ctx: JobContext):
    logging.info("‚ú® Starting entrypoint for Sales Assistant Agent...")
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        logging.error("‚ùå OPENAI_API_KEY is not set")
        raise ValueError("OPENAI_API_KEY environment variable is required")
    session = AgentSession(
        stt=openai.STT(
            model="whisper-1",
            language="en",
            api_key=api_key
        ),
        llm=openai.LLM(
            model="gpt-4o-mini",
            api_key=api_key
        ),
        tts=openai.TTS(
            model="tts-1",
            voice="alloy",
            api_key=api_key
        ),
        vad=silero.VAD.load(),
    )
    await session.start(
        room=ctx.room,
        agent=SalesAssistantAgent(),
        room_input_options=RoomInputOptions(noise_cancellation=None)
    )
    await ctx.connect()
    logging.info("‚úÖ AgentSession started. Waiting for the first user message.")

# –ü—Ä–æ –∫–ª—é—á–∏ (LIVEKIT_API_KEY –∏ SECRET):
# –í—ã –ø—Ä–∞–≤—ã, –º—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ entrypoint —è–≤–Ω–æ. –ò –Ω–µ –Ω—É–∂–Ω–æ. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ livekit-agents (–∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–∫, 
# —á—Ç–æ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ python agent.py, 
# –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∞–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π –¥–ª—è –≤–∞—Å os.getenv("LIVEKIT_API_KEY") –∏ os.getenv("LIVEKIT_API_SECRET") –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ LiveKit. 
if __name__ == "__main__":
    cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint))



# –í–æ—Ç –ø–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞ on_user_speech_committed:
# on_user_speech_committed –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. generate_reply –≤–µ—Ä–Ω—É–ª None, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—è –æ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# –î–∏—Ä–∏–∂–µ—Ä (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫) –≤–∏–¥–∏—Ç —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –º—É–∑—ã–∫–∞–Ω—Ç–∞: await on_function_call(...).
# –í–∞—à –∫–æ–¥ –≤ on_function_call –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–∑—ã–≤–∞–µ—Ç –µ–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç func_result (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ò–≤–∞–Ω–∞). 
# –ú–µ—Ç–æ–¥ on_function_call –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.–î–∏—Ä–∏–∂–µ—Ä (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫) –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –û–Ω –≤–∏–¥–∏—Ç, —á—Ç–æ on_function_call —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∏ —É –Ω–µ–≥–æ –Ω–∞ —Ä—É–∫–∞—Ö –µ—Å—Ç—å func_result.
# –í–æ—Ç –æ–Ω, —Å–∫—Ä—ã—Ç—ã–π —à–∞–≥! –î–∏—Ä–∏–∂–µ—Ä –±–µ—Ä–µ—Ç func_result, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ JSON-—Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–æ–ª—å—é function.
# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
# [
#  {'role': 'user', 'content': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –ò–≤–∞–Ω'},
#  {'role': 'assistant', 'tool_calls': [...]}, // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∑–æ–≤ get_client_info
#  {'role': 'function', 'name': 'get_client_info', 'content': '{"id": 1, "first_name": "–ò–≤–∞–Ω", ...}'} // <-- –†–ï–ó–£–õ–¨–¢–ê–¢
# ]
# –î–∏—Ä–∏–∂–µ—Ä (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫) –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ LLM, –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–π –≤—Å—é —ç—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.
# LLM –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∫–∞—Ä—Ç–∏–Ω—É: —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–Ω–∞ —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å, –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª.
# –¢–µ–ø–µ—Ä—å —É LLM –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∏ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ò–≤–∞–Ω! –†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ —Å–ª—ã—à–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?".
# –î–∏—Ä–∏–∂–µ—Ä (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫) –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –µ–≥–æ –æ–∑–≤—É—á–∏—Ç—å. –û–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º—É–∑—ã–∫–∞–Ω—Ç–∞: await self.say(...).